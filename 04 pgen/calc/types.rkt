#lang racket

(struct nterm              ()              #:transparent #:mutable)
(struct node     nterm     (value)         #:transparent #:mutable)
(struct E        node      ()              #:transparent #:mutable)
(struct operator nterm     (action)        #:transparent #:mutable)
(struct Un       operator  ()              #:transparent #:mutable)
(struct Op1      operator  ()              #:transparent #:mutable)
(struct Op2      operator  ()              #:transparent #:mutable)
(struct Op3      operator  ()              #:transparent #:mutable)
(struct Op4      operator  ()              #:transparent #:mutable)
(struct fold     node      (accumulator)   #:transparent #:mutable)
(struct Pr       node      ()              #:transparent #:mutable)
(struct E1       node      ()              #:transparent #:mutable)
(struct C1       fold      ()              #:transparent #:mutable)
(struct E2       node      ()              #:transparent #:mutable)
(struct C2       fold      ()              #:transparent #:mutable)
(struct E3       node      ()              #:transparent #:mutable)
(struct C3       fold      ()              #:transparent #:mutable)
(struct E4       node      ()              #:transparent #:mutable)
(struct C4       fold      ()              #:transparent #:mutable)
(struct parse-result nterm (value)         #:transparent #:mutable)

(struct token (pos text)                #:transparent #:mutable)
(struct end-of-input token    ()        #:transparent #:mutable)
(struct op-sub       token    ()        #:transparent #:mutable)
(struct op-mul       token    ()        #:transparent #:mutable)
(struct op-div       token    ()        #:transparent #:mutable)
(struct op-add       token    ()        #:transparent #:mutable)
(struct number       token    (value)   #:transparent #:mutable)
(struct open-paren   token    ()        #:transparent #:mutable)
(struct close-paren  token    ()        #:transparent #:mutable)
(struct violation    token    ()        #:transparent #:mutable)

(provide (all-defined-out))
