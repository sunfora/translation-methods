#lang racket

(struct nterm ()        #:transparent #:mutable)
(struct node nterm (children) #:transparent #:mutable)
(struct E    node  ()    #:transparent #:mutable)
(struct Un   node  ()    #:transparent #:mutable)
(struct Op1  node  ()    #:transparent #:mutable)
(struct Op2  node  ()    #:transparent #:mutable)
(struct Op3  node  ()    #:transparent #:mutable)
(struct Op4  node  ()    #:transparent #:mutable)
(struct Op5  node  ()    #:transparent #:mutable)
(struct Pr   node  ()    #:transparent #:mutable)
(struct E1   node  ()    #:transparent #:mutable)
(struct C1   node  ()    #:transparent #:mutable)
(struct E2   node  ()    #:transparent #:mutable)
(struct C2   node  ()    #:transparent #:mutable)
(struct E3   node  ()    #:transparent #:mutable)
(struct C3   node  ()    #:transparent #:mutable)
(struct E4   node  ()    #:transparent #:mutable)
(struct C4   node  ()    #:transparent #:mutable)
(struct E5   node  ()    #:transparent #:mutable)
(struct C5   node  ()    #:transparent #:mutable)
(struct parse-result nterm (value) #:mutable #:transparent)

(struct token (pos text)      #:transparent #:mutable)
(struct end-of-input token () #:transparent #:mutable)
(struct op-neg       token () #:transparent #:mutable)
(struct op-mul       token () #:transparent #:mutable)
(struct op-plus      token () #:transparent #:mutable)
(struct op-and       token () #:transparent #:mutable)
(struct op-xor       token () #:transparent #:mutable)
(struct op-or        token () #:transparent #:mutable)
(struct variable     token () #:transparent #:mutable)
(struct open-paren   token () #:transparent #:mutable)
(struct close-paren  token () #:transparent #:mutable)
(struct violation    token () #:transparent #:mutable)

(provide (all-defined-out))
